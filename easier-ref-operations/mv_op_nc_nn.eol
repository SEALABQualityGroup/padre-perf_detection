//Move an Operation to new Component that is deployed on a New Node

//libraries

import "../evl/library/artifact.eol";
import "../evl/library/association.eol";
//import "library/class.eol";
import "../evl/library/classifier.eol";
import "../evl/library/component.eol";
import "../evl/library/element.eol";
import "../evl/library/interaction.eol";
import "../evl/library/interactionFragment.eol";
import "../evl/library/interactionOperand.eol";
import "../evl/library/combinedFragment.eol";
import "../evl/library/interface.eol";
import "../evl/library/lifeline.eol";
import "../evl/library/manifestation.eol";
import "../evl/library/message.eol";
import "../evl/library/node.eol";
import "../evl/library/operation.eol";
import "../evl/library/package.eol";
//HELPER
import "../evl/library/HELPER.eol";

("moving -->" + self.getName() + " to --> " + targetComp.getName() + " on -> " + targetNode.getName()).println();

//static
var sourceComponent : Component = self.getOwner();
		
targetComp.cloneAppliedStereotypesFrom(sourceComponent); //clono gli stessi stereotipi del componente sorgente	
targetComp.moveInterfacesRealizationFrom(sourceComponent, self);
	
var listOfUsedProvidedInterfaces : List(Interface) = sourceComponent.getAllUsedIntefacesRequiredsBy(self);
	
//deploy
targetComp.deployOn(targetNode);

if(sourceComponent.getNodes().isEmpty()){
	sourceComponent.getName().println("[ERROR] The Component is not deployed !!!");
}

targetNode.clone(sourceComponent.getNodes()->first()); //shall resolve the missed stereotypes
	
targetComp.moveOperation(self); //sposta l'operazione sul componente appena creato
	
//dynamic
self.dynamicFixing(sourceComponent);

"done".println();

