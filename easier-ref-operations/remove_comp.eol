//Remove a Component

//Libraries
import "../evl/library/artifact.eol";
import "../evl/library/association.eol";
import "../evl/library/classifier.eol";
import "../evl/library/component.eol";
import "../evl/library/element.eol";
import "../evl/library/interaction.eol";
import "../evl/library/interactionFragment.eol";
import "../evl/library/interactionOperand.eol";
import "../evl/library/combinedFragment.eol";
import "../evl/library/interface.eol";
import "../evl/library/lifeline.eol";
import "../evl/library/manifestation.eol";
import "../evl/library/message.eol";
import "../evl/library/node.eol";
import "../evl/library/operation.eol";
import "../evl/library/package.eol";
//HELPER
import "../evl/library/HELPER.eol";

var target = Component.all->selectOne(c | c.getName() == targetComponentName);

if(target.isUndefined())
	throw "[ERROR]: Node" + targetComponentName + "is undefined";

//Given Lifeline move everything in component and remove empty entities 
for (lf : Lifeline in target.getLifelines()){
	var messageMap : Map = lf.getIncomingMessages();
	for(messageInUse: Message in messageMap.values().first() ){
		var op : Operation = messageInUse.getSignature();
		// Recupera Component dove muovere OP
		var senderLf : Lifeline = messageInUse.getSendEvent().getCovered();
		var senderComponent: Component = senderLf.getRepresents().getType();
		// Sposto OP
		op.moveIntoComponent(senderComponent);
		}
	lf.destroy();
	}

// Clean Dlepoyment diagram
var nodesToDestroy : Sequence = target.getNodes();
for(n : Node in nodesToDestroy){
	for (a: Artifact in n.getArtifact() ){
		a.destroy();
	}
	for (cp in n.getCommunicationPaths()){
		cp.destroy();
	}
	n.destroy();
}

// Destroy component
target.destroy();
"END".println();
