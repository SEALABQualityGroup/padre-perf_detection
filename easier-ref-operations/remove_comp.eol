//Remove a Component

//Libraries
import "../evl/library/artifact.eol";
import "../evl/library/association.eol";
import "../evl/library/classifier.eol";
import "../evl/library/component.eol";
import "../evl/library/element.eol";
import "../evl/library/interaction.eol";
import "../evl/library/interactionFragment.eol";
import "../evl/library/interactionOperand.eol";
import "../evl/library/combinedFragment.eol";
import "../evl/library/interface.eol";
import "../evl/library/lifeline.eol";
import "../evl/library/manifestation.eol";
import "../evl/library/message.eol";
import "../evl/library/node.eol";
import "../evl/library/operation.eol";
import "../evl/library/package.eol";
//HELPER
import "../evl/library/HELPER.eol";

//Component to be removed
var target = Component.all->selectOne(c | c.getName() == targetComponentName);

if(target.isUndefined())
	throw "Component: " + targetComponentName + " is undefined";

target.moveAndDestroy();

for(a : UML!Artifact in target.getAllArtifacts()){
	a.destroy();
}

/* Clean Deployment diagram
var nodesToDestroy : Sequence = target.getNodes();
for(n : Node in nodesToDestroy){
	n.getName().println("Node to be removed -> ");
	n.destroyRelatedToNode();
	n.destroy();	
}*/

// Destroy component
target.destroy();
//"Remove Component Done".println();
