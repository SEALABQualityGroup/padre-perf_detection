//Remove a Component

//Libraries
import "../evl/library/artifact.eol";
import "../evl/library/association.eol";
import "../evl/library/classifier.eol";
import "../evl/library/component.eol";
import "../evl/library/element.eol";
import "../evl/library/interaction.eol";
import "../evl/library/interactionFragment.eol";
import "../evl/library/interactionOperand.eol";
import "../evl/library/combinedFragment.eol";
import "../evl/library/interface.eol";
import "../evl/library/lifeline.eol";
import "../evl/library/manifestation.eol";
import "../evl/library/message.eol";
import "../evl/library/node.eol";
import "../evl/library/operation.eol";
import "../evl/library/package.eol";
//HELPER
import "../evl/library/HELPER.eol";

//Component to be removed
var target = Node.all->selectOne(c | c.getName() == targetNodeName);

if(target.isUndefined())
	throw "[ERROR]: Node " + targetNodeName + " is undefined";

var ComponentsRelatedToNode : Sequence = target.getDeployedComponents();
for(c : Component in ComponentsRelatedToNode){
	c.moveComponentFromNode();
}
					"QUI1".println();
target.destroyRelatedToNode();
target.destroy;

					"QUI2".println();

"Remove Node Done".println();
