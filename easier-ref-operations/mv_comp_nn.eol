//Deploy a Component to a New Node

//libraries
import "../evl/library/artifact.eol";
import "../evl/library/association.eol";
//import "library/class.eol";
import "../evl/library/classifier.eol";
import "../evl/library/component.eol";
import "../evl/library/element.eol";
import "../evl/library/interaction.eol";
import "../evl/library/interactionFragment.eol";
import "../evl/library/interactionOperand.eol";
import "../evl/library/combinedFragment.eol";
import "../evl/library/interface.eol";
import "../evl/library/lifeline.eol";
import "../evl/library/manifestation.eol";
import "../evl/library/message.eol";
import "../evl/library/node.eol";
import "../evl/library/operation.eol";
import "../evl/library/package.eol";
//HELPER
import "../evl/library/HELPER.eol";


var newNode = new UML!Node;
newNode.setName(newNodeName);
UML!Node.all->first().getNearestPackage().getPackagedElements().add(newNode);
var selfComponent = Component.all->selectOne(c | c.getName() == targetComponentName);

var speedFactor = speed;
var energyFactor = energy;
var costFactor = cost;

//clones applied stereotypes and communication paths
var selfNode = selfComponent.getNodes()->first(); 
newNode.clone(selfNode);

newNode.setValue(newNode.getStereotype("GaExecHost"), "speedFactor", speedFactor.asString());
newNode.getTag("ResourceUsage", "energy")->removeAt(0);
newNode.getTag("ResourceUsage", "energy").add(energyFactor.asString());
newNode.setValue(newNode.getStereotype("HwComponent"), "price", costFactor.asString());

selfComponent.redeployOn(newNode, selfNode);

//"done".println();
