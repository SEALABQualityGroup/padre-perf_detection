operation calc_messages_bounds () : List(Real){ 

	var msgs = Message.all->select(msg | msg.hasStereotype("GaStep"));
	
	var probs : Sequence(Real);
	
	for(msg in msgs){
		if(msg.getTag("GaStep", "prob").isDefined()){
			var firstParent = msg.getInteraction().getFragments()->first().getMessage().getTag("GaStep", "prob").asReal();
			var prob = msg.getTag("GaStep", "prob" ).asReal() * firstParent;
			probs.add(prob);
		}
		else
			probs.add(1);
	}
	
	var bounds : List(Real) = new List(Real);
	bounds.add(probs.max());
	bounds.add(probs.min());
	
	return bounds;
}

operation calc_exec_times_bounds() : List(Real){
	
	var msgs = Message.all->select(m | m.hasStereotype("GaStep"));
	
	var execTimes : Sequence(Real);
	
	for(m in msgs){
		if(m.getTag("GaStep", "execTime")->first().isDefined())
			execTimes.add(m.getTag("GaStep", "execTime")->first().asReal());
	}
	
	var bounds : List(Real) = new List(Real);
	bounds.add(execTimes.max());
	bounds.add(execTimes.min());
	
	return bounds;
}

operation calc_throughputs_bounds() : List(Real) {
	var useCases = UseCase.all->select(uc | uc.hasStereotype("GaScenario") and uc.getTag("GaScenario", "throughput").notEmpty());
	
	var throughputs : Sequence(Real);
	for(uc in useCases){
//		if(uc.hasStereotype('GaScenario') and not uc.getTag("GaScenario", "throughput").isEmpty()){
			throughputs.add(uc.getTag("GaScenario", "throughput")->first().asReal());
//		}
	}
	
	var bounds : List(Real) = new List(Real);
	bounds.add(throughputs.max());
	bounds.add(throughputs.min());
	
	return bounds;
}

operation calc_remote_messages_bounds() : List(Real) {
	var seqOfMes = Message.all->select(m | m.hasStereotype("GaStep") and not m.isReturn());

	var cmps = Component.all;
	
	var remMsgs : Sequence(Real);
	
	var numRemMsg : Integer = 0;
	for(c in cmps){
		numRemMsg = 0;
		for(mes in seqOfMes){
			var lf = mes.getReceiveLifeline(); //lifeline destinataria
			var component = lf.getRepresents().getType(); //componente
							
			if(component.isTypeOf(Component) and c <> component and component.isRemote(c) ){ // i due componenti sono remoti
				numRemMsg = numRemMsg + 1;
			}	
		}
		remMsgs.add(numRemMsg);
	}
	
	
	var bounds : List(Real) = new List(Real);
	bounds.add(remMsgs.max());
	bounds.add(remMsgs.min());
	
	return bounds;
}


operation calc_net_util_bounds() : List(Real) {
	var paths = CommunicationPath.all->select(p | p.hasStereotype("GaCommChannel") and p.getTag("GaCommChannel","utilization")->first().isDefined());
	
	if(paths.isEmpty())
		return null;
	
	var utils : Sequence(Real);
	
	for(p in paths){
		utils.add(p.getTag("GaCommChannel","utilization")->first().asReal());
	}

	var bounds : List(Real) = new List(Real);
	bounds.add(utils.max());
	bounds.add(utils.min());
	
	return bounds;
}

operation calc_rem_insts_bounds() : List(Real){
	var cmps = Component.all;
	
	var remInsts : Sequence(Real);
	
	var numRemComps = 0;
	for(c in cmps){
		numRemComps = 0;
		for(c2 in cmps){	
			if(c2 <> c and c.isRemote(c2)){ // i due componenti sono remoti
				numRemComps = numRemComps + 1;
			}
		}
		remInsts.add(numRemComps);
	}
	
	var bounds : List(Real) = new List(Real);
	bounds.add(remInsts.max());
	bounds.add(remInsts.min());
	
	return bounds;
}

operation calc_max_hw_util_bounds () : List(Real){
	
	var nodes = Node.all->select(n | n.hasStereotype("GaExecHost") and n.getTag("GaExecHost", "utilization")->first().isDefined());
		
	var utils : Sequence(Real);
	
	for(n in nodes){
		//if(n.getTag("GaExecHost", "utilization")->first().isDefined() )
			utils.add(n.getTag("GaExecHost", "utilization")->first().asReal());
	}
	
	var bounds : List(Real) = new List(Real);
	bounds.add(utils.max());
	bounds.add(utils.min());
	
	return bounds;
}
