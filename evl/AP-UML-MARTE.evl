import "metric_functions.eol";
import "metric_functions_fuzzy.eol";
//import "thresholds_eSsopper.eol";
//import "thresholds_trainticket.eol";

//libraries
import "library/artifact.eol";
import "library/association.eol";
//import "library/class.eol";
import "library/classifier.eol";
import "library/component.eol";
import "library/element.eol";
import "library/interaction.eol";
import "library/interactionFragment.eol";
import "library/interactionOperand.eol";
import "library/combinedFragment.eol";
import "library/interface.eol";
import "library/lifeline.eol";
import "library/manifestation.eol";
import "library/message.eol";
import "library/node.eol";
import "library/operation.eol";
import "library/package.eol";

//HELPER
import "library/HELPER.eol";
import "fuzzy_helper.eol";

pre{ // exec time via java 2500ms
	//showThresholds();
	var prob_PAs  = prob_to_be_pa;
	
	var MESSAGES = Message.all->select(mes : Message | mes.notReturn());//->select(msg | msg.hasStereotype("GaStep")); //exec time via java 9ms
	var USECASES = UseCase.all->select(uc | uc.hasStereotype("GaScenario")); 
	var LIFELINES = Lifeline.all;
	var PATHS = CommunicationPath.all->select(p | p.hasStereotype("GaCommChannel") and p.getTag("GaCommChannel","utilization")->first().isDefined());
	var COMPONENTS = Component.all;
	var NODES = Node.all->select(n | n.hasStereotype("GaExecHost") and n.getTag("GaExecHost", "utilization")->first().isDefined());
	
	var rem_insts_bounds_max = 0;
	var rem_insts_bounds_min = 2000;
	calc_rem_insts_bounds();
	
	// *_bounds is a list of 2 real. Max position 0, Min position 1
	var messages_bounds = calc_messages_bounds(); // exec time via java 45ms
	var exec_times_bounds = calc_exec_times_bounds(); // exec time via java 20ms
	var throughputs_bounds = calc_throughputs_bounds(); // exec time via java 8ms
	var remote_messages_bounds = calc_remote_messages_bounds();// exec time via java 1377 (old 5270 ms) 
	var net_util_bounds = calc_net_util_bounds();// exec time via java 10ms
	//var rem_insts_bounds = calc_rem_insts_bounds();// exec time via java 1700ms (old 2226ms)
	var max_hw_util_bounds = calc_max_hw_util_bounds();// exec time via java 34ms
	var num_supplier_connects_bounds = calc_num_supplier_connects_bounds();
	var num_client_connects_bounds = calc_num_client_connects_bounds();
	var num_mgs_in_bounds = calc_num_mgs_in_bounds();
	var num_mgs_out_bounds = calc_num_mgs_out_bounds();

	
}

/*********************************************************************************************
 *																							 *
 *	 								Pipe and Filter 										 *
 *							Antipattern Detection and Validation					 		 *
 *										reviewed											 *
 *********************************************************************************************/

// exec via Java 600ms 
context UML!Operation {
	critique PaF {
		check: 
			self.getOwner().isTypeOf(Component) and
			self.F_probExec_fuzzy() <> 0 and 
			(self.F_resDemand_fuzzy() *	(self.F_T_fuzzy() + self.F_maxHwUtil_fuzzy() )) < prob_PAs 
		message : "PaF <Operation> " + self.name
	}
}


/*********************************************************************************************
 *																							 *
 *	 							Concurrent Processing Systems 								 *
 *							Antipattern Detection and Validation			     			 *
 *									 reviewwed												 *
 *********************************************************************************************/
 
 
/*********************************************************************************************
 *                                      WARNING												 *
 *							MAX HW UTIL is in the first position							 *
 *					CPU max and min are in second and third position						 *	
 *					DISK max and min are in fourth and fifth position						 *
 *********************************************************************************************/
 
context UML!Node {
	critique CPS {
		check: 
			( self.F_maxQL_fuzzy() * self.F_maxHwUtil_fuzzy() ) < prob_PAs
		message : "CPS <" + self.type.name + "> " + self.name
	}
}

/*********************************************************************************************
 *																							 *
 *	 								Extensive Processing  									 *
 *							Antipattern Detection and Validation							 *
 *										reviewed											 *
 *********************************************************************************************/

// exec via Java 300ms
context UML!Component {
 	critique ExtensiveProcessingAP{
 		check:
 			(self.F_resDemand_fuzzy() * 
 			( self.F_maxHwUtil_fuzzy() + self.F_RT_fuzzy() ) < prob_PAs
 					and self.F_probExec_fuzzy() <> 0 )
 		message : "EP <" + self.type.name + "> " + self.name
 	}
}

/*********************************************************************************************
 *																							 *
 *								Blob Controller & Container									 *
 *							Antipattern Detection and Validation							 *
 *										reviewed 											 *
 *********************************************************************************************/

//exec time via Java 1300ms
context UML!Component {
	critique Blob_DataContainer{
		check:
			(self.F_numSupplierConnects_fuzzy() * self.F_numMsgsIn_fuzzy() * 
				(self.F_maxHwUtil_fuzzy() + self.F_maxNetUtil_fuzzy()) ) < prob_PAs
			
		message : "Blob Container <" + self.type.name + "> " + self.getName()
	}
}

// exec via Java 1600ms
context UML!Component {
	critique Blob_DataController {
		check:
			( self.F_numClientConnects_fuzzy() * self.F_numMsgsOut_fuzzy() * 
				(self.F_maxHwUtil_fuzzy() + self.F_maxNetUtil_fuzzy()) ) < prob_PAs
				
		message : "Blob Container <" + self.type.name + "> " + self.getName()
	}
}


/*********************************************************************************************
 *																							 *
 *	 								Empty Semi Truck										 *
 *							Antipattern Detection and Validation							 *
 *										reviewed											 *
 *********************************************************************************************/
 
// exec via Java 300ms
context UML!Component {
 	critique EmptySemiTruck{
 		check:
 			(self.F_numRemMsgs_fuzzy() * 
 				(self.F_maxNetUtil_fuzzy() + self.F_numRemInst_fuzzy())) < prob_PAs
 		
 		message : "EST <" + self.type.name + "> " + self.name
		fix {
			title : "Apply Session Facade Pattern"
			do {
				self.applySessionFacade();
			}
		}
 	}
}

/*********************************************************************************************
 *																							 *
 *	 								Tower of Babel											 *
 *							Antipattern Detection and Validation							 *
 *									reviewed												 *
 *********************************************************************************************
 
 context UML!Component {
 	critique TowerOfBabel{
 		check{
 			if(self.F_numExF(th_maxExF()) and self.F_maxHwUtil(th_maxHwUtil()))
 				return false;
 			return true;
 		}
 		message : "ToB <" + self.type.name + "> " + self.name
 		fix {
			title : "Apply the most used format"
			do {
				self.applyStandardFormat();
			}
		}
		fix{
			title : "Redeploy its owning Component "+self.name+" to the less used neighbour Node"
			do{
				self.redeployOnNearLessUsedNode();
			}
		}
 	}
}

/*********************************************************************************************
 *																							 *
 *	 						    Circuitous  Treasure Hunt									 *
 *							Antipattern Detection and Validation							 *
 *																							 *
 *********************************************************************************************/
 
/*********************************************************************************************
 *																							 *
 *	 						    		One Line Bridge										 *
 *							Antipattern Detection and Validation							 *
 *																							 *
 *********************************************************************************************/
 
/*********************************************************************************************
 *																							 *
 *					    		Excessive Dynamic Allocation								 *
 *							Antipattern Detection and Validation							 *
 *																							 *
 *********************************************************************************************/
 