//verifico se l'artifact rappresenta il componente passato per parametro
operation UML!Artifact hasRepresentationOf(classifier : UML!Classifier) : Boolean {
	for(manifestation in self.getManifestations()){
		if(manifestation.getSuppliers()->exists(sup | sup == classifier)){
			return true;
		}
	}
	return false;
}

operation UML!Artifact getDeploymentNode() : UML!Node{
	return Node.allInstances->selectOne(node : UML!Node | 
		node.getDeployments()->exists(deploy : UML!Deployment | 
			deploy.getDeployedArtifacts()->exists(artifact : UML!Artifact | artifact == self)
		)
	);
}

operation UML!Artifact getDeploymentDevices() : Sequence(UML!Device) {
	return Device.allInstances->select(dev : UML!Device | 
		dev.getDeployments()->exists(deploy : UML!Deployment | 
			deploy.getDeployedArtifacts()->contains(self)
		)
	);
}

operation UML!Artifact getManifestedComponents() : Sequence(UML!Component){
	var manifestations = self.getManifestations();
	var returnValue : Sequence(UML!Component);
	for(man in manifestations){
		if( man.getUtilizedElement().isTypeOf(UML!Component) ){
			returnValue.add(man.getUtilizedElement());
		}
	}
	return returnValue;
	//self.getManifestations()->select(c : Component | this.getUtilizedElement().isTypeOf(UML!Classifier) ).println();
}


operation UML!Artifact getManifestedClassifier() : Sequence(UML!Classifier){
	return self.getManifestations()->select(man : UML!Manifestation | man.getUtilizedElement().isTypeOf(UML!Classifier) );
}

operation UML!Artifact getDeploymentDevice() : UML!Device {
	return Device.allInstances->selectOne(dev : UML!Device | 
		dev.getDeployments()->exists(deploy : UML!Deployment | 
			deploy.getDeployedArtifacts()->contains(self)
		)
	);
}

operation UML!Artifact getCriticalDeploymentDevice() : UML!Device {
	var deplDevs = self.getDeploymentDevices();
	//return Device.allInstances->selectOne(dev : Device | 
	//	dev.getDeployments()->exists(deploy : Deployment | 
	//		deploy.getDeployedArtifacts()->contains(self) and dev=getDevWithMaxUtil(deplDevs)
	//	)
	//);
	return getDevWithMaxUtil(deplDevs);
}





operation UML!Artifact getCriticalOperation() : UML!Operation {
	var manComps = self.getManifestedComponents();
	var allOps = manComps.collect(c|c.getOperations()).flatten().asSequence();
	return getOpWithMaxMeanDemand(allOps);
}





//OK
operation UML!Artifact getLifelines() : List(UML!Lifeline){
	//self.name.println("ARTIFACT: ");
	var returnValue : List(UML!Lifeline) = new List (UML!Lifeline);
	for(lifeline in Lifeline.allInstances){
		if(lifeline.getInteraction().isDefined())
			if(lifeline.getRepresents().isDefined()) 
				if(lifeline.getRepresents().getType().isDefined())
					//lifeline.getRepresents().getType().println("\tLIFELINES TYPE: ");
					if(lifeline.getRepresents().getType().isTypeOf(Artifact) and
					   lifeline.getRepresents().getType()=self){
							returnValue.add(lifeline);
		}
	}
	//returnValue.collect(l|l.getRepresents().getType().getManifestedComponents().flatten().collect(c|c.getName())).flatten().println("LIFELINES FOR COMPONENT:" + self.getName() + " ----> ");
	return returnValue;
}

/*
operation UML!Artifact getCriticalLifeline4BlobContainerAP(th_numReceivedMsgs : List(Real)) : Map{
	var returnValue : Map(Interaction, Lifeline) = new Map();
	var lifelines = self.getLifelines();//.println("LIFELINES: "); //OK
	
	for(lf in lifelines){
		var mapOfInteracationAndIncomingMsgs = lf.getIncomingMessages(); //OK - returns a Map(interaction, seq of Mes)
		var incomingMsgsProbability = 0.0;
		//if(debug()){
			("number of incomingMsgs of ["+lf.represents.type.name+"] in ["+lf.getInteraction().getName()+"] --> "+lf.getIncomingMessages().size()).println();
		//}
		
		for(int in mapOfInteracationAndIncomingMsgs.keySet()){
			for(mes in mapOfInteracationAndIncomingMsgs.get(int)){
				incomingMsgsProbability = incomingMsgsProbability.asReal() + mes.getMsgProb();//mes.getReceiveEvent().getProbabilityOf();
			}
			switch (int.getName()) {
				case "Access greenhouse" : 
					if(incomingMsgsProbability >= th_numReceivedMsgs->first())
						returnValue.put(int,lf);
				case "Change settings sequence" : 
					if(incomingMsgsProbability >= th_numReceivedMsgs->second())
						returnValue.put(int,lf);
				default : showError("Method: getCriticalLifeline4BlobContainerAP in component.eol"); 
			}
		}
		//if(debug()){
			("incomingMsgsProbability of ["+lf.represents.type.name+"] in ["+lf.getInteraction().getName()+"] --> "+incomingMsgsProbability).println();
		//}
	}
	
	return returnValue;
}*/

operation UML!Artifact getTotalDemand() : Real {
	//ASSUMPTION: Demand di una Interaction = SUM(Demand di ogni Message, Demand di ogni referred Interaction)
	var totDemand : Real = 0.0;
	var comps = self.getManifestedComponents();
	if(comps.isDefined() and comps.notEmpty()) {
		var ops = comps.collect(c|c.getOperations()).flatten();
		if(ops.isDefined() and ops.notEmpty()) {
			for(op in ops) {
				var msgs = Message.all.select(m|m.hasStereotype("GaAcqStep") and 
									 m.getValue(m.getStereotype("GaAcqStep"), "servCount").isDefined() and
									 m.getValue(m.getStereotype("GaAcqStep"), "servCount").notEmpty() and
									 m.getValue(m.getStereotype("GaAcqStep"), "prob").isDefined() and
									 m.getValue(m.getStereotype("GaAcqStep"), "rep").isDefined() and
									 m.signature.isDefined() and m.signature=op
				);
				for(m in msgs) {
					var servCount : Real = m.getValue(m.getStereotype("GaAcqStep"), "servCount").first().asReal();
					var prob : Real = m.getValue(m.getStereotype("GaAcqStep"), "prob").asReal();
					var rep : Real = m.getValue(m.getStereotype("GaAcqStep"), "rep").asReal();
					totDemand = totDemand + (servCount * prob * rep);
				}
			}
		}
		
	}
	return totDemand;//.println("TOTAL DEMAND FOR ARTIFACT " + self.getName() + ": ");
}



operation UML!Artifact deployTo(d : UML!Device) {
	var newDepl : Deployment = new Deployment;
	newDepl.name = self.name;
	d.deployments.add(newDepl);
	newDepl.deployedArtifact.add(self);
	newDepl.supplier.add(self);
	newDepl.client.add(d);
	
}

	